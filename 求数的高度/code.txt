import java.util.Scanner;

public class Test02 {
	/**
	 * 牛客网编程题 求树的高度 题目描述 现在有一棵合法的二叉树，树的节点都是用数字表示，现在给定这棵树上所有的         *父子关系，求这棵树的高度 输入描述:
	 * 
	 * 输入的第一行表示节点的个数n（1 ≤ n ≤ 1000，节点的编号为0到n-1）组成，
	 * 下面是n-1行，每行有两个整数，第一个数表示父节点的编号，第二个数表示子节点的编号
	 * 
	 * 输出描述:输出树的高度，为一个整数
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int m = scanner.nextInt(); // 输入节点数
		TreeNode rootNode = new TreeNode(scanner.nextInt()); // 输入根节点
		createTree(rootNode, rootNode.val, scanner.nextInt()); // 建树（父节点与根节点相同）
		for (int i = 1; i < m - 1; i++) {
			createTree(rootNode, scanner.nextInt(), scanner.nextInt());
		} // 循环父节点与子节点，建树

		int height = getTreeHeight(rootNode);
		System.out.println(height);

		scanner.close();
	}

	/**
	 * 求树的高度 递归的使用
	 * 
	 * @param rootNode
	 * @return
	 */
	private static int getTreeHeight(TreeNode rootNode) {
		if (rootNode == null) {
			return 0;
		}
		/*
		 * 以下三段代码，首先分别得到左右子树的高（递归的作用是一直递归到叶子节点，从而寻找到最深的叶子节点）
		 * 再返回左右子节点，高比较大的那一个高，并加一返回给父节点 最后根节点得到的就是它的子节点的高加一，因此就是根节点的高，也就是树的高。
		 */
		int nLeft = getTreeHeight(rootNode.left);
		int nRight = getTreeHeight(rootNode.right);
		return (nLeft > nRight) ? (nLeft + 1) : (nRight + 1);
	}

	/**
	 * 建树
	 * 
	 * @param root
	 * @param father
	 * @param childVal
	 */
	public static void createTree(TreeNode root, int father, int childVal) {
		if (root == null) {
			return;
		}
		/*
		 * 建树要点，先放左节点，后发右节点
		 */
		if (root != null && root.val == father) {
			if (root.left == null) {// 左孩子为空即将其作为左孩子节点
				root.left = new TreeNode(childVal);
			} else {// 作为右孩子节点
				root.right = new TreeNode(childVal);
			}
			return;
		}

		createTree(root.left, father, childVal);
		createTree(root.right, father, childVal);
	}

	/**
	 * 对象： 树
	 * 
	 */
	static class TreeNode {
		TreeNode left;
		TreeNode right;
		int val;

		public TreeNode(int val) {
			this.val = val;
		}

	}
}
