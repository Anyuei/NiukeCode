import java.util.Scanner;

/**
 * Test01NE.java
 * 
 * @author anyunpei 2018年4月12日下午4:52:07
 *         小易有一些彩色的砖块。每种颜色由一个大写字母表示。各个颜色砖块看起来都完全一样。现在有一个给定的字符串s,
 *         s中每个字符代表小易的某个砖块的颜色。小易想把他所有的砖块排成一行。如果最多存在一对不同颜色的相邻砖块,那么这行砖块就很漂亮的。
 *         请你帮助小易计算有多少种方式将他所有砖块排成漂亮的一行。(如果两种方式所对应的砖块颜色序列是相同的,那么认为这两种方式是一样的。) 例如:
 *         s = "ABAB",那么小易有六种排列的结果: "AABB","ABAB","ABBA","BAAB","BABA","BBAA"
 *         其中只有"AABB"和"BBAA"满足最多只有一对不同颜色的相邻砖块。 输入描述:
 * 
 *         输入包括一个字符串s,字符串s的长度length(1 ≤ length ≤ 50),s中的每一个字符都为一个大写字母(A到Z)。
 *         输出描述:
 *         输出一个整数,表示小易可以有多少种方式。
 *         输入例子1:
 *         ABAB
 *         输出例子1:
 * 
 *         2
 */

public class NETest01_ColorBrick {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		prob(input.nextLine());

	}

	/*
	 * 函数主要统计字符串中出现英文的种类 若超出2个则输出0，未超出，输出种类数，因为2种不同的砖块恰好有2种漂亮的摆法，1种就一种。
	 */
	public static void prob(String inStr) {
		int b[] = new int[127];// ASCII表最大127
		for (int i = 0; i < inStr.length(); i++) {// 循环判断每个字符
			if (Character.isAlphabetic(inStr.charAt(i))) {// 如果字符为字母
				b[inStr.charAt(i)] = 1;// 对应字母位赋值为1
			}
		}
		int sum = 0;
		for (int i = 0; i < b.length; i++) {// 计算种类数
			sum += b[i];
		}
		if (sum <= 2) {
			System.out.println(sum);
		} else {
			System.out.println("0");
		}

	}
}
